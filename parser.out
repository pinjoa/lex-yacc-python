Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> code
Rule 1     code -> s
Rule 2     code -> code ; s
Rule 3     ciclo -> for var [ e ellipsis e ] com_list ; endfor
Rule 4     func -> fun var ( args ) com_list ; endfun
Rule 5     condicao -> if e then com_list else com_list endif
Rule 6     comando -> e
Rule 7     comando -> ciclo
Rule 8     comando -> condicao
Rule 9     comando -> var assign e
Rule 10    comando -> say e_list
Rule 11    s -> func
Rule 12    s -> comando
Rule 13    e_list -> e
Rule 14    e_list -> e_list , e
Rule 15    n -> nr
Rule 16    n -> - e
Rule 17    n -> e + e
Rule 18    n -> e - e
Rule 19    n -> e * e
Rule 20    n -> e / e
Rule 21    n -> e < e
Rule 22    n -> e > e
Rule 23    b -> f
Rule 24    b -> e or e
Rule 25    b -> e and e
Rule 26    b -> e xor e
Rule 27    f -> true
Rule 28    f -> false
Rule 29    f -> not f
Rule 30    e -> var
Rule 31    e -> ( e )
Rule 32    e -> b
Rule 33    e -> n
Rule 34    e -> string
Rule 35    e -> var ( e_list )
Rule 36    e -> var ( )
Rule 37    com_list -> comando
Rule 38    com_list -> com_list ; comando
Rule 39    var_list -> var
Rule 40    var_list -> var_list , var
Rule 41    args -> <empty>
Rule 42    args -> var_list

Terminals, with rules where they appear

(                    : 4 31 35 36
)                    : 4 31 35 36
*                    : 19
+                    : 17
,                    : 14 40
-                    : 16 18
/                    : 20
;                    : 2 3 4 38
<                    : 21
>                    : 22
[                    : 3
]                    : 3
and                  : 25
assign               : 9
ellipsis             : 3
else                 : 5
endfor               : 3
endfun               : 4
endif                : 5
error                : 
false                : 28
for                  : 3
fun                  : 4
if                   : 5
not                  : 29
nr                   : 15
or                   : 24
say                  : 10
string               : 34
then                 : 5
true                 : 27
var                  : 3 4 9 30 35 36 39 40
xor                  : 26

Nonterminals, with rules where they appear

args                 : 4
b                    : 32
ciclo                : 7
code                 : 2 0
com_list             : 3 4 5 5 38
comando              : 12 37 38
condicao             : 8
e                    : 3 3 5 6 9 13 14 16 17 17 18 18 19 19 20 20 21 21 22 22 24 24 25 25 26 26 31
e_list               : 10 14 35
f                    : 23 29
func                 : 11
n                    : 33
s                    : 1 2
var_list             : 40 42

Parsing method: LALR

state 0

    (0) S' -> . code
    (1) code -> . s
    (2) code -> . code ; s
    (11) s -> . func
    (12) s -> . comando
    (4) func -> . fun var ( args ) com_list ; endfun
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    fun             shift and go to state 5
    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    code                           shift and go to state 1
    s                              shift and go to state 2
    func                           shift and go to state 3
    comando                        shift and go to state 4
    e                              shift and go to state 8
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 1

    (0) S' -> code .
    (2) code -> code . ; s

    ;               shift and go to state 23


state 2

    (1) code -> s .

    ;               reduce using rule 1 (code -> s .)
    $end            reduce using rule 1 (code -> s .)


state 3

    (11) s -> func .

    ;               reduce using rule 11 (s -> func .)
    $end            reduce using rule 11 (s -> func .)


state 4

    (12) s -> comando .

    ;               reduce using rule 12 (s -> comando .)
    $end            reduce using rule 12 (s -> comando .)


state 5

    (4) func -> fun . var ( args ) com_list ; endfun

    var             shift and go to state 24


state 6

    (9) comando -> var . assign e
    (30) e -> var .
    (35) e -> var . ( e_list )
    (36) e -> var . ( )

    assign          shift and go to state 25
    or              reduce using rule 30 (e -> var .)
    and             reduce using rule 30 (e -> var .)
    xor             reduce using rule 30 (e -> var .)
    +               reduce using rule 30 (e -> var .)
    -               reduce using rule 30 (e -> var .)
    *               reduce using rule 30 (e -> var .)
    /               reduce using rule 30 (e -> var .)
    <               reduce using rule 30 (e -> var .)
    >               reduce using rule 30 (e -> var .)
    ;               reduce using rule 30 (e -> var .)
    $end            reduce using rule 30 (e -> var .)
    else            reduce using rule 30 (e -> var .)
    endif           reduce using rule 30 (e -> var .)
    (               shift and go to state 26


state 7

    (31) e -> ( . e )
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 27
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 8

    (6) comando -> e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    ;               reduce using rule 6 (comando -> e .)
    $end            reduce using rule 6 (comando -> e .)
    else            reduce using rule 6 (comando -> e .)
    endif           reduce using rule 6 (comando -> e .)
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 9

    (7) comando -> ciclo .

    ;               reduce using rule 7 (comando -> ciclo .)
    $end            reduce using rule 7 (comando -> ciclo .)
    else            reduce using rule 7 (comando -> ciclo .)
    endif           reduce using rule 7 (comando -> ciclo .)


state 10

    (8) comando -> condicao .

    ;               reduce using rule 8 (comando -> condicao .)
    $end            reduce using rule 8 (comando -> condicao .)
    else            reduce using rule 8 (comando -> condicao .)
    endif           reduce using rule 8 (comando -> condicao .)


state 11

    (10) comando -> say . e_list
    (13) e_list -> . e
    (14) e_list -> . e_list , e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e_list                         shift and go to state 38
    e                              shift and go to state 39
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 12

    (32) e -> b .

    or              reduce using rule 32 (e -> b .)
    and             reduce using rule 32 (e -> b .)
    xor             reduce using rule 32 (e -> b .)
    +               reduce using rule 32 (e -> b .)
    -               reduce using rule 32 (e -> b .)
    *               reduce using rule 32 (e -> b .)
    /               reduce using rule 32 (e -> b .)
    <               reduce using rule 32 (e -> b .)
    >               reduce using rule 32 (e -> b .)
    ;               reduce using rule 32 (e -> b .)
    $end            reduce using rule 32 (e -> b .)
    )               reduce using rule 32 (e -> b .)
    ,               reduce using rule 32 (e -> b .)
    else            reduce using rule 32 (e -> b .)
    endif           reduce using rule 32 (e -> b .)
    then            reduce using rule 32 (e -> b .)
    ellipsis        reduce using rule 32 (e -> b .)
    ]               reduce using rule 32 (e -> b .)


state 13

    (33) e -> n .

    or              reduce using rule 33 (e -> n .)
    and             reduce using rule 33 (e -> n .)
    xor             reduce using rule 33 (e -> n .)
    +               reduce using rule 33 (e -> n .)
    -               reduce using rule 33 (e -> n .)
    *               reduce using rule 33 (e -> n .)
    /               reduce using rule 33 (e -> n .)
    <               reduce using rule 33 (e -> n .)
    >               reduce using rule 33 (e -> n .)
    ;               reduce using rule 33 (e -> n .)
    $end            reduce using rule 33 (e -> n .)
    )               reduce using rule 33 (e -> n .)
    ,               reduce using rule 33 (e -> n .)
    else            reduce using rule 33 (e -> n .)
    endif           reduce using rule 33 (e -> n .)
    then            reduce using rule 33 (e -> n .)
    ellipsis        reduce using rule 33 (e -> n .)
    ]               reduce using rule 33 (e -> n .)


state 14

    (34) e -> string .

    or              reduce using rule 34 (e -> string .)
    and             reduce using rule 34 (e -> string .)
    xor             reduce using rule 34 (e -> string .)
    +               reduce using rule 34 (e -> string .)
    -               reduce using rule 34 (e -> string .)
    *               reduce using rule 34 (e -> string .)
    /               reduce using rule 34 (e -> string .)
    <               reduce using rule 34 (e -> string .)
    >               reduce using rule 34 (e -> string .)
    ;               reduce using rule 34 (e -> string .)
    $end            reduce using rule 34 (e -> string .)
    )               reduce using rule 34 (e -> string .)
    ,               reduce using rule 34 (e -> string .)
    else            reduce using rule 34 (e -> string .)
    endif           reduce using rule 34 (e -> string .)
    then            reduce using rule 34 (e -> string .)
    ellipsis        reduce using rule 34 (e -> string .)
    ]               reduce using rule 34 (e -> string .)


state 15

    (3) ciclo -> for . var [ e ellipsis e ] com_list ; endfor

    var             shift and go to state 40


state 16

    (5) condicao -> if . e then com_list else com_list endif
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 41
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 17

    (23) b -> f .

    or              reduce using rule 23 (b -> f .)
    and             reduce using rule 23 (b -> f .)
    xor             reduce using rule 23 (b -> f .)
    +               reduce using rule 23 (b -> f .)
    -               reduce using rule 23 (b -> f .)
    *               reduce using rule 23 (b -> f .)
    /               reduce using rule 23 (b -> f .)
    <               reduce using rule 23 (b -> f .)
    >               reduce using rule 23 (b -> f .)
    ;               reduce using rule 23 (b -> f .)
    $end            reduce using rule 23 (b -> f .)
    )               reduce using rule 23 (b -> f .)
    ,               reduce using rule 23 (b -> f .)
    else            reduce using rule 23 (b -> f .)
    endif           reduce using rule 23 (b -> f .)
    then            reduce using rule 23 (b -> f .)
    ellipsis        reduce using rule 23 (b -> f .)
    ]               reduce using rule 23 (b -> f .)


state 18

    (15) n -> nr .

    or              reduce using rule 15 (n -> nr .)
    and             reduce using rule 15 (n -> nr .)
    xor             reduce using rule 15 (n -> nr .)
    +               reduce using rule 15 (n -> nr .)
    -               reduce using rule 15 (n -> nr .)
    *               reduce using rule 15 (n -> nr .)
    /               reduce using rule 15 (n -> nr .)
    <               reduce using rule 15 (n -> nr .)
    >               reduce using rule 15 (n -> nr .)
    ;               reduce using rule 15 (n -> nr .)
    $end            reduce using rule 15 (n -> nr .)
    )               reduce using rule 15 (n -> nr .)
    ,               reduce using rule 15 (n -> nr .)
    else            reduce using rule 15 (n -> nr .)
    endif           reduce using rule 15 (n -> nr .)
    then            reduce using rule 15 (n -> nr .)
    ellipsis        reduce using rule 15 (n -> nr .)
    ]               reduce using rule 15 (n -> nr .)


state 19

    (16) n -> - . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 42
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 20

    (27) f -> true .

    or              reduce using rule 27 (f -> true .)
    and             reduce using rule 27 (f -> true .)
    xor             reduce using rule 27 (f -> true .)
    +               reduce using rule 27 (f -> true .)
    -               reduce using rule 27 (f -> true .)
    *               reduce using rule 27 (f -> true .)
    /               reduce using rule 27 (f -> true .)
    <               reduce using rule 27 (f -> true .)
    >               reduce using rule 27 (f -> true .)
    ;               reduce using rule 27 (f -> true .)
    $end            reduce using rule 27 (f -> true .)
    )               reduce using rule 27 (f -> true .)
    ,               reduce using rule 27 (f -> true .)
    else            reduce using rule 27 (f -> true .)
    endif           reduce using rule 27 (f -> true .)
    then            reduce using rule 27 (f -> true .)
    ellipsis        reduce using rule 27 (f -> true .)
    ]               reduce using rule 27 (f -> true .)


state 21

    (28) f -> false .

    or              reduce using rule 28 (f -> false .)
    and             reduce using rule 28 (f -> false .)
    xor             reduce using rule 28 (f -> false .)
    +               reduce using rule 28 (f -> false .)
    -               reduce using rule 28 (f -> false .)
    *               reduce using rule 28 (f -> false .)
    /               reduce using rule 28 (f -> false .)
    <               reduce using rule 28 (f -> false .)
    >               reduce using rule 28 (f -> false .)
    ;               reduce using rule 28 (f -> false .)
    $end            reduce using rule 28 (f -> false .)
    )               reduce using rule 28 (f -> false .)
    ,               reduce using rule 28 (f -> false .)
    else            reduce using rule 28 (f -> false .)
    endif           reduce using rule 28 (f -> false .)
    then            reduce using rule 28 (f -> false .)
    ellipsis        reduce using rule 28 (f -> false .)
    ]               reduce using rule 28 (f -> false .)


state 22

    (29) f -> not . f
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    f                              shift and go to state 43

state 23

    (2) code -> code ; . s
    (11) s -> . func
    (12) s -> . comando
    (4) func -> . fun var ( args ) com_list ; endfun
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    fun             shift and go to state 5
    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    s                              shift and go to state 44
    func                           shift and go to state 3
    comando                        shift and go to state 4
    e                              shift and go to state 8
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 24

    (4) func -> fun var . ( args ) com_list ; endfun

    (               shift and go to state 45


state 25

    (9) comando -> var assign . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 46
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 26

    (35) e -> var ( . e_list )
    (36) e -> var ( . )
    (13) e_list -> . e
    (14) e_list -> . e_list , e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    )               shift and go to state 48
    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e_list                         shift and go to state 47
    e                              shift and go to state 39
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 27

    (31) e -> ( e . )
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    )               shift and go to state 49
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 28

    (30) e -> var .
    (35) e -> var . ( e_list )
    (36) e -> var . ( )

    )               reduce using rule 30 (e -> var .)
    or              reduce using rule 30 (e -> var .)
    and             reduce using rule 30 (e -> var .)
    xor             reduce using rule 30 (e -> var .)
    +               reduce using rule 30 (e -> var .)
    -               reduce using rule 30 (e -> var .)
    *               reduce using rule 30 (e -> var .)
    /               reduce using rule 30 (e -> var .)
    <               reduce using rule 30 (e -> var .)
    >               reduce using rule 30 (e -> var .)
    ,               reduce using rule 30 (e -> var .)
    ;               reduce using rule 30 (e -> var .)
    $end            reduce using rule 30 (e -> var .)
    else            reduce using rule 30 (e -> var .)
    endif           reduce using rule 30 (e -> var .)
    then            reduce using rule 30 (e -> var .)
    ellipsis        reduce using rule 30 (e -> var .)
    ]               reduce using rule 30 (e -> var .)
    (               shift and go to state 26


state 29

    (24) b -> e or . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 50
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 30

    (25) b -> e and . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 51
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 31

    (26) b -> e xor . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 52
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 32

    (17) n -> e + . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 53
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 33

    (18) n -> e - . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 54
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 34

    (19) n -> e * . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 55
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 35

    (20) n -> e / . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 56
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 36

    (21) n -> e < . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 57
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 37

    (22) n -> e > . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 58
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 38

    (10) comando -> say e_list .
    (14) e_list -> e_list . , e

    ;               reduce using rule 10 (comando -> say e_list .)
    $end            reduce using rule 10 (comando -> say e_list .)
    else            reduce using rule 10 (comando -> say e_list .)
    endif           reduce using rule 10 (comando -> say e_list .)
    ,               shift and go to state 59


state 39

    (13) e_list -> e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    ,               reduce using rule 13 (e_list -> e .)
    ;               reduce using rule 13 (e_list -> e .)
    $end            reduce using rule 13 (e_list -> e .)
    else            reduce using rule 13 (e_list -> e .)
    endif           reduce using rule 13 (e_list -> e .)
    )               reduce using rule 13 (e_list -> e .)
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 40

    (3) ciclo -> for var . [ e ellipsis e ] com_list ; endfor

    [               shift and go to state 60


state 41

    (5) condicao -> if e . then com_list else com_list endif
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    then            shift and go to state 61
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 42

    (16) n -> - e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 16 (n -> - e .)
    and             reduce using rule 16 (n -> - e .)
    xor             reduce using rule 16 (n -> - e .)
    +               reduce using rule 16 (n -> - e .)
    -               reduce using rule 16 (n -> - e .)
    *               reduce using rule 16 (n -> - e .)
    /               reduce using rule 16 (n -> - e .)
    <               reduce using rule 16 (n -> - e .)
    >               reduce using rule 16 (n -> - e .)
    ;               reduce using rule 16 (n -> - e .)
    $end            reduce using rule 16 (n -> - e .)
    )               reduce using rule 16 (n -> - e .)
    ,               reduce using rule 16 (n -> - e .)
    else            reduce using rule 16 (n -> - e .)
    endif           reduce using rule 16 (n -> - e .)
    then            reduce using rule 16 (n -> - e .)
    ellipsis        reduce using rule 16 (n -> - e .)
    ]               reduce using rule 16 (n -> - e .)

  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 34 ]
  ! /               [ shift and go to state 35 ]
  ! <               [ shift and go to state 36 ]
  ! >               [ shift and go to state 37 ]


state 43

    (29) f -> not f .

    or              reduce using rule 29 (f -> not f .)
    and             reduce using rule 29 (f -> not f .)
    xor             reduce using rule 29 (f -> not f .)
    +               reduce using rule 29 (f -> not f .)
    -               reduce using rule 29 (f -> not f .)
    *               reduce using rule 29 (f -> not f .)
    /               reduce using rule 29 (f -> not f .)
    <               reduce using rule 29 (f -> not f .)
    >               reduce using rule 29 (f -> not f .)
    ;               reduce using rule 29 (f -> not f .)
    $end            reduce using rule 29 (f -> not f .)
    )               reduce using rule 29 (f -> not f .)
    ,               reduce using rule 29 (f -> not f .)
    else            reduce using rule 29 (f -> not f .)
    endif           reduce using rule 29 (f -> not f .)
    then            reduce using rule 29 (f -> not f .)
    ellipsis        reduce using rule 29 (f -> not f .)
    ]               reduce using rule 29 (f -> not f .)


state 44

    (2) code -> code ; s .

    ;               reduce using rule 2 (code -> code ; s .)
    $end            reduce using rule 2 (code -> code ; s .)


state 45

    (4) func -> fun var ( . args ) com_list ; endfun
    (41) args -> .
    (42) args -> . var_list
    (39) var_list -> . var
    (40) var_list -> . var_list , var

    )               reduce using rule 41 (args -> .)
    var             shift and go to state 62

    args                           shift and go to state 63
    var_list                       shift and go to state 64

state 46

    (9) comando -> var assign e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    ;               reduce using rule 9 (comando -> var assign e .)
    $end            reduce using rule 9 (comando -> var assign e .)
    else            reduce using rule 9 (comando -> var assign e .)
    endif           reduce using rule 9 (comando -> var assign e .)
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 47

    (35) e -> var ( e_list . )
    (14) e_list -> e_list . , e

    )               shift and go to state 65
    ,               shift and go to state 59


state 48

    (36) e -> var ( ) .

    or              reduce using rule 36 (e -> var ( ) .)
    and             reduce using rule 36 (e -> var ( ) .)
    xor             reduce using rule 36 (e -> var ( ) .)
    +               reduce using rule 36 (e -> var ( ) .)
    -               reduce using rule 36 (e -> var ( ) .)
    *               reduce using rule 36 (e -> var ( ) .)
    /               reduce using rule 36 (e -> var ( ) .)
    <               reduce using rule 36 (e -> var ( ) .)
    >               reduce using rule 36 (e -> var ( ) .)
    ;               reduce using rule 36 (e -> var ( ) .)
    $end            reduce using rule 36 (e -> var ( ) .)
    )               reduce using rule 36 (e -> var ( ) .)
    ,               reduce using rule 36 (e -> var ( ) .)
    else            reduce using rule 36 (e -> var ( ) .)
    endif           reduce using rule 36 (e -> var ( ) .)
    then            reduce using rule 36 (e -> var ( ) .)
    ellipsis        reduce using rule 36 (e -> var ( ) .)
    ]               reduce using rule 36 (e -> var ( ) .)


state 49

    (31) e -> ( e ) .

    or              reduce using rule 31 (e -> ( e ) .)
    and             reduce using rule 31 (e -> ( e ) .)
    xor             reduce using rule 31 (e -> ( e ) .)
    +               reduce using rule 31 (e -> ( e ) .)
    -               reduce using rule 31 (e -> ( e ) .)
    *               reduce using rule 31 (e -> ( e ) .)
    /               reduce using rule 31 (e -> ( e ) .)
    <               reduce using rule 31 (e -> ( e ) .)
    >               reduce using rule 31 (e -> ( e ) .)
    ;               reduce using rule 31 (e -> ( e ) .)
    $end            reduce using rule 31 (e -> ( e ) .)
    )               reduce using rule 31 (e -> ( e ) .)
    ,               reduce using rule 31 (e -> ( e ) .)
    else            reduce using rule 31 (e -> ( e ) .)
    endif           reduce using rule 31 (e -> ( e ) .)
    then            reduce using rule 31 (e -> ( e ) .)
    ellipsis        reduce using rule 31 (e -> ( e ) .)
    ]               reduce using rule 31 (e -> ( e ) .)


state 50

    (24) b -> e or e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 24 (b -> e or e .)
    xor             reduce using rule 24 (b -> e or e .)
    ;               reduce using rule 24 (b -> e or e .)
    $end            reduce using rule 24 (b -> e or e .)
    )               reduce using rule 24 (b -> e or e .)
    ,               reduce using rule 24 (b -> e or e .)
    else            reduce using rule 24 (b -> e or e .)
    endif           reduce using rule 24 (b -> e or e .)
    then            reduce using rule 24 (b -> e or e .)
    ellipsis        reduce using rule 24 (b -> e or e .)
    ]               reduce using rule 24 (b -> e or e .)
    and             shift and go to state 30
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37

  ! and             [ reduce using rule 24 (b -> e or e .) ]
  ! +               [ reduce using rule 24 (b -> e or e .) ]
  ! -               [ reduce using rule 24 (b -> e or e .) ]
  ! *               [ reduce using rule 24 (b -> e or e .) ]
  ! /               [ reduce using rule 24 (b -> e or e .) ]
  ! <               [ reduce using rule 24 (b -> e or e .) ]
  ! >               [ reduce using rule 24 (b -> e or e .) ]
  ! or              [ shift and go to state 29 ]
  ! xor             [ shift and go to state 31 ]


state 51

    (25) b -> e and e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 25 (b -> e and e .)
    and             reduce using rule 25 (b -> e and e .)
    xor             reduce using rule 25 (b -> e and e .)
    ;               reduce using rule 25 (b -> e and e .)
    $end            reduce using rule 25 (b -> e and e .)
    )               reduce using rule 25 (b -> e and e .)
    ,               reduce using rule 25 (b -> e and e .)
    else            reduce using rule 25 (b -> e and e .)
    endif           reduce using rule 25 (b -> e and e .)
    then            reduce using rule 25 (b -> e and e .)
    ellipsis        reduce using rule 25 (b -> e and e .)
    ]               reduce using rule 25 (b -> e and e .)
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37

  ! +               [ reduce using rule 25 (b -> e and e .) ]
  ! -               [ reduce using rule 25 (b -> e and e .) ]
  ! *               [ reduce using rule 25 (b -> e and e .) ]
  ! /               [ reduce using rule 25 (b -> e and e .) ]
  ! <               [ reduce using rule 25 (b -> e and e .) ]
  ! >               [ reduce using rule 25 (b -> e and e .) ]
  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]


state 52

    (26) b -> e xor e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 26 (b -> e xor e .)
    xor             reduce using rule 26 (b -> e xor e .)
    ;               reduce using rule 26 (b -> e xor e .)
    $end            reduce using rule 26 (b -> e xor e .)
    )               reduce using rule 26 (b -> e xor e .)
    ,               reduce using rule 26 (b -> e xor e .)
    else            reduce using rule 26 (b -> e xor e .)
    endif           reduce using rule 26 (b -> e xor e .)
    then            reduce using rule 26 (b -> e xor e .)
    ellipsis        reduce using rule 26 (b -> e xor e .)
    ]               reduce using rule 26 (b -> e xor e .)
    and             shift and go to state 30
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37

  ! and             [ reduce using rule 26 (b -> e xor e .) ]
  ! +               [ reduce using rule 26 (b -> e xor e .) ]
  ! -               [ reduce using rule 26 (b -> e xor e .) ]
  ! *               [ reduce using rule 26 (b -> e xor e .) ]
  ! /               [ reduce using rule 26 (b -> e xor e .) ]
  ! <               [ reduce using rule 26 (b -> e xor e .) ]
  ! >               [ reduce using rule 26 (b -> e xor e .) ]
  ! or              [ shift and go to state 29 ]
  ! xor             [ shift and go to state 31 ]


state 53

    (17) n -> e + e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 17 (n -> e + e .)
    and             reduce using rule 17 (n -> e + e .)
    xor             reduce using rule 17 (n -> e + e .)
    +               reduce using rule 17 (n -> e + e .)
    -               reduce using rule 17 (n -> e + e .)
    <               reduce using rule 17 (n -> e + e .)
    >               reduce using rule 17 (n -> e + e .)
    ;               reduce using rule 17 (n -> e + e .)
    $end            reduce using rule 17 (n -> e + e .)
    )               reduce using rule 17 (n -> e + e .)
    ,               reduce using rule 17 (n -> e + e .)
    else            reduce using rule 17 (n -> e + e .)
    endif           reduce using rule 17 (n -> e + e .)
    then            reduce using rule 17 (n -> e + e .)
    ellipsis        reduce using rule 17 (n -> e + e .)
    ]               reduce using rule 17 (n -> e + e .)
    *               shift and go to state 34
    /               shift and go to state 35

  ! *               [ reduce using rule 17 (n -> e + e .) ]
  ! /               [ reduce using rule 17 (n -> e + e .) ]
  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! <               [ shift and go to state 36 ]
  ! >               [ shift and go to state 37 ]


state 54

    (18) n -> e - e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 18 (n -> e - e .)
    and             reduce using rule 18 (n -> e - e .)
    xor             reduce using rule 18 (n -> e - e .)
    +               reduce using rule 18 (n -> e - e .)
    -               reduce using rule 18 (n -> e - e .)
    <               reduce using rule 18 (n -> e - e .)
    >               reduce using rule 18 (n -> e - e .)
    ;               reduce using rule 18 (n -> e - e .)
    $end            reduce using rule 18 (n -> e - e .)
    )               reduce using rule 18 (n -> e - e .)
    ,               reduce using rule 18 (n -> e - e .)
    else            reduce using rule 18 (n -> e - e .)
    endif           reduce using rule 18 (n -> e - e .)
    then            reduce using rule 18 (n -> e - e .)
    ellipsis        reduce using rule 18 (n -> e - e .)
    ]               reduce using rule 18 (n -> e - e .)
    *               shift and go to state 34
    /               shift and go to state 35

  ! *               [ reduce using rule 18 (n -> e - e .) ]
  ! /               [ reduce using rule 18 (n -> e - e .) ]
  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! <               [ shift and go to state 36 ]
  ! >               [ shift and go to state 37 ]


state 55

    (19) n -> e * e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 19 (n -> e * e .)
    and             reduce using rule 19 (n -> e * e .)
    xor             reduce using rule 19 (n -> e * e .)
    +               reduce using rule 19 (n -> e * e .)
    -               reduce using rule 19 (n -> e * e .)
    *               reduce using rule 19 (n -> e * e .)
    /               reduce using rule 19 (n -> e * e .)
    <               reduce using rule 19 (n -> e * e .)
    >               reduce using rule 19 (n -> e * e .)
    ;               reduce using rule 19 (n -> e * e .)
    $end            reduce using rule 19 (n -> e * e .)
    )               reduce using rule 19 (n -> e * e .)
    ,               reduce using rule 19 (n -> e * e .)
    else            reduce using rule 19 (n -> e * e .)
    endif           reduce using rule 19 (n -> e * e .)
    then            reduce using rule 19 (n -> e * e .)
    ellipsis        reduce using rule 19 (n -> e * e .)
    ]               reduce using rule 19 (n -> e * e .)

  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 34 ]
  ! /               [ shift and go to state 35 ]
  ! <               [ shift and go to state 36 ]
  ! >               [ shift and go to state 37 ]


state 56

    (20) n -> e / e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 20 (n -> e / e .)
    and             reduce using rule 20 (n -> e / e .)
    xor             reduce using rule 20 (n -> e / e .)
    +               reduce using rule 20 (n -> e / e .)
    -               reduce using rule 20 (n -> e / e .)
    *               reduce using rule 20 (n -> e / e .)
    /               reduce using rule 20 (n -> e / e .)
    <               reduce using rule 20 (n -> e / e .)
    >               reduce using rule 20 (n -> e / e .)
    ;               reduce using rule 20 (n -> e / e .)
    $end            reduce using rule 20 (n -> e / e .)
    )               reduce using rule 20 (n -> e / e .)
    ,               reduce using rule 20 (n -> e / e .)
    else            reduce using rule 20 (n -> e / e .)
    endif           reduce using rule 20 (n -> e / e .)
    then            reduce using rule 20 (n -> e / e .)
    ellipsis        reduce using rule 20 (n -> e / e .)
    ]               reduce using rule 20 (n -> e / e .)

  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]
  ! +               [ shift and go to state 32 ]
  ! -               [ shift and go to state 33 ]
  ! *               [ shift and go to state 34 ]
  ! /               [ shift and go to state 35 ]
  ! <               [ shift and go to state 36 ]
  ! >               [ shift and go to state 37 ]


state 57

    (21) n -> e < e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 21 (n -> e < e .)
    and             reduce using rule 21 (n -> e < e .)
    xor             reduce using rule 21 (n -> e < e .)
    <               reduce using rule 21 (n -> e < e .)
    >               reduce using rule 21 (n -> e < e .)
    ;               reduce using rule 21 (n -> e < e .)
    $end            reduce using rule 21 (n -> e < e .)
    )               reduce using rule 21 (n -> e < e .)
    ,               reduce using rule 21 (n -> e < e .)
    else            reduce using rule 21 (n -> e < e .)
    endif           reduce using rule 21 (n -> e < e .)
    then            reduce using rule 21 (n -> e < e .)
    ellipsis        reduce using rule 21 (n -> e < e .)
    ]               reduce using rule 21 (n -> e < e .)
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! +               [ reduce using rule 21 (n -> e < e .) ]
  ! -               [ reduce using rule 21 (n -> e < e .) ]
  ! *               [ reduce using rule 21 (n -> e < e .) ]
  ! /               [ reduce using rule 21 (n -> e < e .) ]
  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]
  ! <               [ shift and go to state 36 ]
  ! >               [ shift and go to state 37 ]


state 58

    (22) n -> e > e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    or              reduce using rule 22 (n -> e > e .)
    and             reduce using rule 22 (n -> e > e .)
    xor             reduce using rule 22 (n -> e > e .)
    <               reduce using rule 22 (n -> e > e .)
    >               reduce using rule 22 (n -> e > e .)
    ;               reduce using rule 22 (n -> e > e .)
    $end            reduce using rule 22 (n -> e > e .)
    )               reduce using rule 22 (n -> e > e .)
    ,               reduce using rule 22 (n -> e > e .)
    else            reduce using rule 22 (n -> e > e .)
    endif           reduce using rule 22 (n -> e > e .)
    then            reduce using rule 22 (n -> e > e .)
    ellipsis        reduce using rule 22 (n -> e > e .)
    ]               reduce using rule 22 (n -> e > e .)
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35

  ! +               [ reduce using rule 22 (n -> e > e .) ]
  ! -               [ reduce using rule 22 (n -> e > e .) ]
  ! *               [ reduce using rule 22 (n -> e > e .) ]
  ! /               [ reduce using rule 22 (n -> e > e .) ]
  ! or              [ shift and go to state 29 ]
  ! and             [ shift and go to state 30 ]
  ! xor             [ shift and go to state 31 ]
  ! <               [ shift and go to state 36 ]
  ! >               [ shift and go to state 37 ]


state 59

    (14) e_list -> e_list , . e
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 66
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 60

    (3) ciclo -> for var [ . e ellipsis e ] com_list ; endfor
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 67
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 61

    (5) condicao -> if e then . com_list else com_list endif
    (37) com_list -> . comando
    (38) com_list -> . com_list ; comando
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 8
    com_list                       shift and go to state 68
    comando                        shift and go to state 69
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 62

    (39) var_list -> var .

    ,               reduce using rule 39 (var_list -> var .)
    )               reduce using rule 39 (var_list -> var .)


state 63

    (4) func -> fun var ( args . ) com_list ; endfun

    )               shift and go to state 70


state 64

    (42) args -> var_list .
    (40) var_list -> var_list . , var

    )               reduce using rule 42 (args -> var_list .)
    ,               shift and go to state 71


state 65

    (35) e -> var ( e_list ) .

    or              reduce using rule 35 (e -> var ( e_list ) .)
    and             reduce using rule 35 (e -> var ( e_list ) .)
    xor             reduce using rule 35 (e -> var ( e_list ) .)
    +               reduce using rule 35 (e -> var ( e_list ) .)
    -               reduce using rule 35 (e -> var ( e_list ) .)
    *               reduce using rule 35 (e -> var ( e_list ) .)
    /               reduce using rule 35 (e -> var ( e_list ) .)
    <               reduce using rule 35 (e -> var ( e_list ) .)
    >               reduce using rule 35 (e -> var ( e_list ) .)
    ;               reduce using rule 35 (e -> var ( e_list ) .)
    $end            reduce using rule 35 (e -> var ( e_list ) .)
    )               reduce using rule 35 (e -> var ( e_list ) .)
    ,               reduce using rule 35 (e -> var ( e_list ) .)
    else            reduce using rule 35 (e -> var ( e_list ) .)
    endif           reduce using rule 35 (e -> var ( e_list ) .)
    then            reduce using rule 35 (e -> var ( e_list ) .)
    ellipsis        reduce using rule 35 (e -> var ( e_list ) .)
    ]               reduce using rule 35 (e -> var ( e_list ) .)


state 66

    (14) e_list -> e_list , e .
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    ,               reduce using rule 14 (e_list -> e_list , e .)
    ;               reduce using rule 14 (e_list -> e_list , e .)
    $end            reduce using rule 14 (e_list -> e_list , e .)
    else            reduce using rule 14 (e_list -> e_list , e .)
    endif           reduce using rule 14 (e_list -> e_list , e .)
    )               reduce using rule 14 (e_list -> e_list , e .)
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 67

    (3) ciclo -> for var [ e . ellipsis e ] com_list ; endfor
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    ellipsis        shift and go to state 72
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 68

    (5) condicao -> if e then com_list . else com_list endif
    (38) com_list -> com_list . ; comando

    else            shift and go to state 73
    ;               shift and go to state 74


state 69

    (37) com_list -> comando .

    else            reduce using rule 37 (com_list -> comando .)
    ;               reduce using rule 37 (com_list -> comando .)
    endif           reduce using rule 37 (com_list -> comando .)


state 70

    (4) func -> fun var ( args ) . com_list ; endfun
    (37) com_list -> . comando
    (38) com_list -> . com_list ; comando
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    com_list                       shift and go to state 75
    comando                        shift and go to state 69
    e                              shift and go to state 8
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 71

    (40) var_list -> var_list , . var

    var             shift and go to state 76


state 72

    (3) ciclo -> for var [ e ellipsis . e ] com_list ; endfor
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 28
    (               shift and go to state 7
    string          shift and go to state 14
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 77
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 73

    (5) condicao -> if e then com_list else . com_list endif
    (37) com_list -> . comando
    (38) com_list -> . com_list ; comando
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 8
    com_list                       shift and go to state 78
    comando                        shift and go to state 69
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 74

    (38) com_list -> com_list ; . comando
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    comando                        shift and go to state 79
    e                              shift and go to state 8
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 75

    (4) func -> fun var ( args ) com_list . ; endfun
    (38) com_list -> com_list . ; comando

    ;               shift and go to state 80


state 76

    (40) var_list -> var_list , var .

    ,               reduce using rule 40 (var_list -> var_list , var .)
    )               reduce using rule 40 (var_list -> var_list , var .)


state 77

    (3) ciclo -> for var [ e ellipsis e . ] com_list ; endfor
    (24) b -> e . or e
    (25) b -> e . and e
    (26) b -> e . xor e
    (17) n -> e . + e
    (18) n -> e . - e
    (19) n -> e . * e
    (20) n -> e . / e
    (21) n -> e . < e
    (22) n -> e . > e

    ]               shift and go to state 81
    or              shift and go to state 29
    and             shift and go to state 30
    xor             shift and go to state 31
    +               shift and go to state 32
    -               shift and go to state 33
    *               shift and go to state 34
    /               shift and go to state 35
    <               shift and go to state 36
    >               shift and go to state 37


state 78

    (5) condicao -> if e then com_list else com_list . endif
    (38) com_list -> com_list . ; comando

    endif           shift and go to state 82
    ;               shift and go to state 74


state 79

    (38) com_list -> com_list ; comando .

    else            reduce using rule 38 (com_list -> com_list ; comando .)
    ;               reduce using rule 38 (com_list -> com_list ; comando .)
    endif           reduce using rule 38 (com_list -> com_list ; comando .)


state 80

    (4) func -> fun var ( args ) com_list ; . endfun
    (38) com_list -> com_list ; . comando
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    endfun          shift and go to state 83
    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    comando                        shift and go to state 79
    e                              shift and go to state 8
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 81

    (3) ciclo -> for var [ e ellipsis e ] . com_list ; endfor
    (37) com_list -> . comando
    (38) com_list -> . com_list ; comando
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 8
    com_list                       shift and go to state 84
    comando                        shift and go to state 69
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 82

    (5) condicao -> if e then com_list else com_list endif .

    ;               reduce using rule 5 (condicao -> if e then com_list else com_list endif .)
    $end            reduce using rule 5 (condicao -> if e then com_list else com_list endif .)
    else            reduce using rule 5 (condicao -> if e then com_list else com_list endif .)
    endif           reduce using rule 5 (condicao -> if e then com_list else com_list endif .)


state 83

    (4) func -> fun var ( args ) com_list ; endfun .

    ;               reduce using rule 4 (func -> fun var ( args ) com_list ; endfun .)
    $end            reduce using rule 4 (func -> fun var ( args ) com_list ; endfun .)


state 84

    (3) ciclo -> for var [ e ellipsis e ] com_list . ; endfor
    (38) com_list -> com_list . ; comando

    ;               shift and go to state 85


state 85

    (3) ciclo -> for var [ e ellipsis e ] com_list ; . endfor
    (38) com_list -> com_list ; . comando
    (6) comando -> . e
    (7) comando -> . ciclo
    (8) comando -> . condicao
    (9) comando -> . var assign e
    (10) comando -> . say e_list
    (30) e -> . var
    (31) e -> . ( e )
    (32) e -> . b
    (33) e -> . n
    (34) e -> . string
    (35) e -> . var ( e_list )
    (36) e -> . var ( )
    (3) ciclo -> . for var [ e ellipsis e ] com_list ; endfor
    (5) condicao -> . if e then com_list else com_list endif
    (23) b -> . f
    (24) b -> . e or e
    (25) b -> . e and e
    (26) b -> . e xor e
    (15) n -> . nr
    (16) n -> . - e
    (17) n -> . e + e
    (18) n -> . e - e
    (19) n -> . e * e
    (20) n -> . e / e
    (21) n -> . e < e
    (22) n -> . e > e
    (27) f -> . true
    (28) f -> . false
    (29) f -> . not f

    endfor          shift and go to state 86
    var             shift and go to state 6
    say             shift and go to state 11
    (               shift and go to state 7
    string          shift and go to state 14
    for             shift and go to state 15
    if              shift and go to state 16
    nr              shift and go to state 18
    -               shift and go to state 19
    true            shift and go to state 20
    false           shift and go to state 21
    not             shift and go to state 22

    e                              shift and go to state 8
    comando                        shift and go to state 79
    ciclo                          shift and go to state 9
    condicao                       shift and go to state 10
    b                              shift and go to state 12
    n                              shift and go to state 13
    f                              shift and go to state 17

state 86

    (3) ciclo -> for var [ e ellipsis e ] com_list ; endfor .

    ;               reduce using rule 3 (ciclo -> for var [ e ellipsis e ] com_list ; endfor .)
    $end            reduce using rule 3 (ciclo -> for var [ e ellipsis e ] com_list ; endfor .)
    else            reduce using rule 3 (ciclo -> for var [ e ellipsis e ] com_list ; endfor .)
    endif           reduce using rule 3 (ciclo -> for var [ e ellipsis e ] com_list ; endfor .)

